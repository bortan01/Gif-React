{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","categorias","type","value","onChange","target","handleInputChance","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","title","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFechGifs","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAc/C,OACG,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACFC,QAAQC,IAAI,UACRN,EAAWO,OAAOC,OAAS,IAC5BV,GAAc,SAACW,GAAD,OAAiBT,GAAjB,mBAA+BS,OAC7CR,EAAc,MAIjB,SACG,uBACGS,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACT,IAjBM,SAACA,GACxBE,QAAQC,IAAIH,EAAEU,OAAOF,OACrBV,EAAcE,EAAEU,OAAOF,OAeEG,CAAkBX,S,+BCpBpCY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEII,MAAMF,GAFV,cAEdG,EAFc,gBAGGA,EAAUC,OAHb,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACJC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UATG,kBAabN,GAba,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBG,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAEtC,OACG,sBAAKc,UAAY,wBAAjB,UACG,qBAAKC,IAAOf,EAAKgB,IAAMJ,IACvB,4BAAIA,QCFAK,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAACA,GAAc,IAAD,EACZjB,mBAAS,CAChCwB,KAAM,GACNa,SAAS,IAH0B,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAXAC,qBAAU,WACPxB,EAAQC,GACJwB,MAAK,SAACd,GACJY,EAAS,CACNf,KAAMG,EACNU,SAAS,SAGlB,CAACpB,IAGGqB,EDVmBI,CAAYzB,GAA9BO,EAH8B,EAG9BA,KAAMa,EAHwB,EAGxBA,QAEd,OACG,qCACG,6BAAKpB,IACJoB,GAAW,wCAET,qBAAKJ,UAAU,YAAf,SAEIT,EAAKE,KAAI,SAACC,GACR,OAAO,cAAC,EAAD,eAEAA,GADCA,EAAIC,aEdjBe,EAAe,WAAO,IAAD,EACK3C,mBAAS,CAAC,cADf,mBACxB4C,EADwB,KACZ7C,EADY,KAS/B,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEM6C,EAAWlB,KAAI,SAACmB,GACb,OAAO,cAAC,EAAD,CAEP5B,SAAU4B,GADHA,Y,MCjBzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dbe09d32.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n   const [inputValue, setInputValue] = useState(\"\");\n   const handleInputChance = (e) => {\n      console.log(e.target.value);\n      setInputValue(e.target.value);\n   }\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      console.log(\"submit\");\n      if (inputValue.trim().length > 2) {\n         setCategories((categorias) => [inputValue,...categorias]);\n         setInputValue('');\n      }\n   }\n   return (\n      <form onSubmit={handleSubmit}>\n         <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => { handleInputChance(e) }}\n         />\n      </form>\n   )\n}\n\nAddCategory.propTypes = {\n   setCategories : PropTypes.func.isRequired\n}","\n\nexport const getGifs = async (category) => {\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=R4qK3NSI73RXvjZSdZ8hCDYXSfEq0xSj`;\n   const respuesta = await fetch(url);\n   const { data } = await respuesta.json();\n\n   const gifs = data.map((img) => {\n      return {\n         id: img.id,\n         url: img.images?.downsized_medium.url,\n         title: img.title\n      }\n   });\n   \n   return gifs;\n \n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n   return (\n      <div className = \"card animate__fadeOut\">\n         <img src = {url} alt= {title}></img>\n         <p>{title}</p>\n      </div>\n   )\n}\n","import React from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { useFechGifs } from '../hooks/useFechGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n   // const [images, setImages] = useState([]);\n   const { data, loading } = useFechGifs(category);\n\n   return (\n      <>\n         <h3>{category}</h3>\n         {loading && <p>Loading</p>}\n         {\n            <div className=\"card-grid\">\n             \n               {data.map((img) => {\n                  return <GifGridItem\n                     key={img.id}\n                     {...img}\n                  />\n               })}\n            </div>\n         }\n      </>\n   );\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\nexport const useFechGifs = (category) => {\n   const [state, setState] = useState({\n      data: [],\n      loading: true\n   });\n   useEffect(() => {\n      getGifs(category)\n         .then((img) => {\n            setState({\n               data: img,\n               loading: false\n            });\n         });\n   }, [category]);\n\n\n   return state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n   const [categories, setCategories] = useState(['one punch']);\n   // const categories = ['one punch', 'Samuray X', 'goku'];\n   // const handleAdd = () => {\n   //    setCategories([...categories, 'one piece']);\n   // setCategories(['one piece', ...categories]);\n   // setCategories((cats) =>  [...cats, 'one piece'] );\n   //};\n\n   return (\n      <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={setCategories} />\n         <hr />\n         <ol>\n            {\n               categories.map((cat) => {\n                  return <GifGrid \n                  key = {cat}\n                  category={cat}>\n\n                  </GifGrid>\n               })\n            }\n         </ol>\n      </>\n   )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}